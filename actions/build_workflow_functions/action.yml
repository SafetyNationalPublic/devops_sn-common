name: "Build Web"
inputs:
  BRANCH:
    description: 'Branch to build'
    default: 'master'
    required: true
    type: string
  NUGET_API_KEY:
    required: true
  GITHUB_TOKEN:
    required: true
  GITHUB_BUILD_RELEASE:
    required: true
  PROJECTPATH:
    required: true
    type: string
  PROJECTFILENAME:
    required: true
    type: string

runs:
  using: "composite"
  steps: 
    - name: Support longpaths
      shell: cmd
      run: git config --system core.longpaths true

    - name: Scan for file
      env:
        BRANCH: ${{ github.event.inputs.BRANCH }}
        PROJECTPATH: ${{ inputs.PROJECTPATH }}
        PROJECTFILENAME: ${{ inputs.PROJECTFILENAME }}
      shell: cmd
      run: dir /s /b ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}*.csproj

    - name: Restore Project
      shell: cmd
      run: dotnet restore  ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj

    - name: Build Project
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: |
        echo on
        dotnet build ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj /p:DeployOnBuild=true /p:DeployTarget=Package;CreatePackageOnPublish=true
        echo "GITHUB_BUILD_RELEASE is %GITHUB_BUILD_RELEASE%"
        echo "BuildVersion is %BuildVersion%"
        echo "----==== Run buildenvvars.bat ====----"
        echo echo on > ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo echo on >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        type ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\buildenvvars.bat >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo echo "test_var=testvalue" ^>^> $GITHUB_ENV >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo echo "DOTNET_BUILD_VERSION=%BuildVersion%" ^>^> $GITHUB_ENV >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo echo ^"Updated BuildVersion is ^%BuildVersion^%^" >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo echo ^"test_var=testvalue^" ^>^> $GITHUB_ENV >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo echo ^"DOTNET_BUILD_VERSION=^%BuildVersion^%^" ^>^> $GITHUB_ENV >> ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        echo "${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat"
        dir ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\*.*
        dir ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\*.*
        type ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat
        ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\newbuildenvvars.bat &
        echo "Updated BuildVersion is %BuildVersion%"
        echo "test_var=testvalue" >> $GITHUB_ENV
        echo "DOTNET_BUILD_VERSION=%BuildVersion%" >> $GITHUB_ENV

    - name: Run buildenvvars
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\buildenvvars.bat

    - name: Check Build Version Environment Variable
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: |
        echo "GITHUB_BUILD_RELEASE is %GITHUB_BUILD_RELEASE%"
        echo "BuildVersion is %BuildVersion%"
        echo "BuildVersion in action is ${{ env.DOTNET_BUILD_VERSION }}

    - name: Create ZIP
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: '..\..\..\..\..\${{ inputs.PROJECTPATH }}.zip'
        directory: ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\bin\debug\net6.0\publish

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.PROJECTPATH }}-${{ env.DOTNET_BUILD_VERSION }}
        release_name: ${{ inputs.PROJECTPATH }}-${{ github.event.inputs.BRANCH }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/${{ inputs.PROJECTPATH }}.zip
        asset_name: ${{ inputs.PROJECTPATH }}-${{ env.DOTNET_BUILD_VERSION }}.zip
        asset_content_type: application/zip
