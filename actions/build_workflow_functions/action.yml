name: "Build Web"
inputs:
  BRANCH:
    description: 'Branch to build'
    default: 'master'
    required: true
    type: string
  NUGET_API_KEY:
    required: true
  GITHUB_TOKEN:
    required: true
  GITHUB_BUILD_RELEASE:
    required: true
  BUILD_PACKAGES:
    description: 'Branch to build'
    default: 'false'
    required: false
    type: string
  PROJECTPATH:
    required: true
    type: string
  PROJECTFILENAME:
    required: true
    type: string

runs:
  using: "composite"
  steps: 
    - name: Support longpaths
      shell: cmd
      run: git config --system core.longpaths true

    - name: Scan for file
      env:
        BRANCH: ${{ github.event.inputs.BRANCH }}
        PROJECTPATH: ${{ inputs.PROJECTPATH }}
        PROJECTFILENAME: ${{ inputs.PROJECTFILENAME }}
      shell: cmd
      run: dir /s /b ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}*.csproj

    - name: Restore Project
      shell: cmd
      run: dotnet restore  ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj

    - name: Build Project
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: dotnet build ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj /p:DeployOnBuild=true /p:DeployTarget=Package;CreatePackageOnPublish=true

    - name: Set variables
      id: dotenv
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      uses: falti/dotenv-action@v1.0.2
      with:
        path: ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\.env
        log-variables: true

    - name: Check Build Version Environment Variable
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      run: |
        echo "GITHUB_BUILD_RELEASE is %GITHUB_BUILD_RELEASE%"
        echo "BuildVersion is %BuildVersion%"
        echo "BuildVersion in action is ${{ steps.dotenv.outputs.DOTNET_BUILD_VERSION }}

    - name: Create ZIP
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: '..\..\..\..\..\${{ inputs.PROJECTPATH }}.zip'
        directory: ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\bin\debug\net6.0\publish

    - name: Create Release Label Start
      shell: cmd
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      run: |
            echo ################################################################################################
            echo ################################################################################################
            echo ################################################################################################
            echo " ________       ______                                   ________                 ______   "
            echo " ___  __ \_____ ___  /_____ ______ ______________        ___  __ \____  _____________  /_  "
            echo " __  /_/ /_  _ \__  / _  _ \_  __ `/__  ___/_  _ \       __  /_/ /_  / / /__  ___/__  __ \ "
            echo " _  _, _/ /  __/_  /  /  __// /_/ / _(__  ) /  __/       _  ____/ / /_/ / _(__  ) _  / / / "
            echo " /_/ |_|  \___/ /_/   \___/ \__,_/  /____/  \___/        /_/      \__,_/  /____/  /_/ /_/  "
            echo "                                                                                           "
            echo                as ${{ inputs.PROJECTFILENAME }}-${{ steps.dotenv.outputs.DOTNET_BASE_BUILD_VERSION }}
            echo ################################################################################################

    - name: Create Release
      id: create_release
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.PROJECTPATH }}-${{ steps.dotenv.outputs.DOTNET_BUILD_VERSION }}
        release_name: ${{ inputs.PROJECTPATH }}-${{ steps.dotenv.outputs.DOTNET_BASE_BUILD_VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/${{ inputs.PROJECTPATH }}.zip
        asset_name: ${{ inputs.PROJECTPATH }}-${{ steps.dotenv.outputs.DOTNET_BASE_BUILD_VERSION }}.zip
        asset_content_type: application/zip
