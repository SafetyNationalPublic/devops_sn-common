name: "Build Libraries"
inputs:
  BRANCH:
    description: 'Branch to build'
    default: 'master'
    required: true
    type: string
  NUGET_API_KEY:
    required: true
  GITHUB_TOKEN:
    required: true
  GITHUB_BUILD_RELEASE:
    required: true
  PROJECTPATH:
    required: true
    type: string
  BUILD_PACKAGES:
    description: 'Branch to build'
    default: 'false'
    required: false
    type: string
  PROJECTFILENAME:
    required: true
    type: string

runs:
  using: "composite"
  steps: 
    - name: Support longpaths
      shell: cmd
      run: git config --system core.longpaths true

    - name: Title
      shell: cmd
      run: echo "### Building ${{ inputs.PROJECTFILENAME }}" >> $GITHUB_STEP_SUMMARY

    - name: Open Group
      shell: cmd
      run: echo "::group::{ 'Building ${{ inputs.PROJECTFILENAME }}' }"

    - name: Scan for file
      env:
        BRANCH: ${{ github.event.inputs.BRANCH }}
        PROJECTPATH: ${{ inputs.PROJECTPATH }}
        PROJECTFILENAME: ${{ inputs.PROJECTFILENAME }}
      shell: cmd
      run: dir /s /b ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}*.csproj

    - name: Restore Project
      shell: cmd
      run: dotnet restore  ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj

    - name: Build Project
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: dotnet build --configuration Debug ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj --no-restore /p:BuildProjectReferences=false

    - name: Pack Project
      shell: cmd
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      run: |
          echo ################################&echo  scanning directory ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\ for ${{ inputs.PROJECTFILENAME }}\*.*.nupkg &echo ################################
          for /f "delims=" %%c in ('dir /s /b ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}*.*.nupkg') do (
            echo ################################################################################################
            echo ################################################################################################
            echo ################################################################################################
            echo " _____   __        _________      _____        ________                 ______   "
            echo " ___  | / /____  ____  ____/_____ __  /_       ___  __ \____  _____________  /_  "
            echo " __   |/ / _  / / /_  / __  _  _ \_  __/       __  /_/ /_  / / /__  ___/__  __ \ "
            echo " _  /|  /  / /_/ / / /_/ /  /  __// /_         _  ____/ / /_/ / _(__  ) _  / / / "
            echo " /_/ |_/   \__,_/  \____/   \___/ \__/         /_/      \__,_/  /____/  /_/ /_/  "
            echo "                                                                                 "
            echo                on package:%%c
            echo ################################################################################################
            dotnet nuget push %%c --source https://nuget.pkg.github.com/SafetyNationalOrg/index.json --api-key ${{ inputs.NUGET_API_KEY }} --skip-duplicate
            echo ################################################################################################
            echo ################################################################################################
            echo ################################################################################################
          )
          REM Clear file not found error if not package is found
          cmd /c "exit /b 0"

    - name: Close group
      shell: cmd
      if: ${{ inputs.BUILD_PACKAGES == 'true' }}
      run: echo "::endgroup::"

