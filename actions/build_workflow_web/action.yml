name: "Build Web"
inputs:
  BRANCH:
    description: 'Branch to build'
    default: 'master'
    required: true
    type: string
  NUGET_API_KEY:
    required: true
  GITHUB_TOKEN:
    required: true
  GITHUB_BUILD_RELEASE:
    required: true
  PROJECTPATH:
    required: true
    type: string
  PROJECTFILENAME:
    required: true
    type: string

runs:
  using: "composite"
  steps: 
    - name: Support longpaths
      shell: cmd
      run: git config --system core.longpaths true

    - name: Title and start group
      env:
        BRANCH: ${{ github.event.inputs.BRANCH }}
        PROJECTPATH: ${{ inputs.PROJECTPATH }}
        PROJECTFILENAME: ${{ inputs.PROJECTFILENAME }}
      shell: cmd
      run: |
          echo "# Building ${{ inputs.PROJECTFILENAME }}" >> $GITHUB_STEP_SUMMARY
          echo "::group::{ 'Building ${{ inputs.PROJECTFILENAME }}' }"

    - name: Scan for file
      shell: cmd
      run: dir /s /b ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}*.csproj

    - name: Restore Project
      shell: cmd
      run: dotnet restore  ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj

    - name: Build Project
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: dotnet build --configuration Debug ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj --no-restore /p:DeployOnBuild=true /p:DeployTarget=Package;CreatePackageOnPublish=true /p:CommitHash=${GITHUB_SHA}

    - name: Pack Project
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: dotnet pack --configuration Debug ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}.csproj --no-build

    - name: Pack Project
      shell: cmd
      run: |
          echo "################################`r`n scanning directory ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\ for ${{ inputs.PROJECTFILENAME }}*.*.nupkg `r`n################################"
          for /f "delims=" %%c in ('dir /s /b ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\${{ inputs.PROJECTFILENAME }}*.*.nupkg') do (
            echo "################################`r`n nuget push on package:%%c `r`n################################"
            dotnet nuget push %%c --source https://nuget.pkg.github.com/SafetyNationalOrg/index.json --api-key ${{ inputs.NUGET_API_KEY }} --skip-duplicate
            rem echo "******************************** Error Level: %ERRORLEVEL% ********************************"
          )
          REM Clear file not found error if not package is found
          cmd /c "exit /b 0"

    - name: Close Group
      shell: cmd
      run: echo "::endgroup::"

    - name: Set variables
      id: dotenv
      uses: falti/dotenv-action@v1.0.2
      with:
        path: ${{ github.workspace }}\${{ inputs.PROJECTPATH }}\obj\.env
        log-variables: true

    - name: Check Build Version Environment Variable
      env:
        GITHUB_BUILD_RELEASE: ${{ github.event.inputs.GITHUB_BUILD_RELEASE }}
      shell: cmd
      run: |
        echo "GITHUB_BUILD_RELEASE is %GITHUB_BUILD_RELEASE%"
        echo "BuildVersion is %BuildVersion%"
        echo "BuildVersion in action is ${{ steps.dotenv.outputs.DOTNET_BUILD_VERSION }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.dotenv.outputs.package_file_name }}
        release_name: ${{ inputs.PROJECTFILENAME }}-${{ steps.dotenv.outputs.DOTNET_BASE_BUILD_VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/${{ inputs.PROJECTPATH }}/bin/${{ steps.dotenv.outputs.PACKAGE_FILE_NAME }}.zip
        asset_name: ${{ steps.dotenv.outputs.PACKAGE_FILE_NAME }}.zip
        asset_content_type: application/zip
